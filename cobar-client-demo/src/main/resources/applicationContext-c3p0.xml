<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	default-lazy-init="false"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<description>Spring公共配置</description>
	<context:annotation-config/>
	<context:component-scan base-package="cobar.client.demo"></context:component-scan>
	<context:property-placeholder location="classpath:application.development.properties"/>
	
	<!-- 配置数据源结束 -->
	<bean id="dataSource0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc0.url}" />
		<property name="user" value="${jdbc0.username}" />
		<property name="password" value="${jdbc0.password}" />
		<!--连接池中保留的最大连接数。默认值: 15 -->
		<property name="maxPoolSize" value="5" />
		<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
		<property name="initialPoolSize" value="5" />
		 <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
		<property name="maxIdleTime" value="10" />
		 <!-- 连接池中保留的最小连接数，默认为：3--> 
		<property name="minPoolSize" value="5" />
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="checkoutTimeout" value="3000"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="2"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->
        <property name="acquireRetryAttempts" value="5"/>
         <!--重新尝试的时间间隔，默认为：1000毫秒-->   
          <property name="acquireRetryDelay" value="1000" />  
  
          <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->   
          <property name="autoCommitOnClose" value="false"/>  
  
          <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->   
          <property name="automaticTestTable" value="Test"/>
  
          <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->   
          <property name="breakAfterAcquireFailure" value="false"/>  
  
          <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->   
          <property name="idleConnectionTestPeriod" value="60"/>  
          <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->   
          <property name="maxStatements" value="100"/>  
          <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->   
          <property name="maxStatementsPerConnection"/> 
        
	</bean>
	<bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc1.url}" />
		<property name="user" value="${jdbc1.username}" />
		<property name="password" value="${jdbc1.password}" />
		<property name="maxPoolSize" value="5" />
		<property name="initialPoolSize" value="5" />
		<property name="maxIdleTime" value="1" />
		<property name="minPoolSize" value="5" />
	</bean>
	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc2.url}" />
		<property name="user" value="${jdbc2.username}" />
		<property name="password" value="${jdbc2.password}" />
		<property name="maxPoolSize" value="5" />
		<property name="initialPoolSize" value="5" />
		<property name="maxIdleTime" value="1" />
		<property name="minPoolSize" value="5" />
	</bean>
	<!-- 配置路由规则开始 -->
	
	<!-- 配置数据源开始 -->
	<bean id="dataSources"
		class="com.alibaba.cobar.client.datasources.DefaultCobarDataSourceService">
		<property name="dataSourceDescriptors">
			<set>
				<bean
					class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
					<property name="identity" value="partition0" />
					<property name="targetDataSource" ref="dataSource0" />
					<property name="targetDetectorDataSource" ref="dataSource0" />
				</bean>
				<bean
					class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
					<property name="identity" value="partition1" />
					<property name="targetDataSource" ref="dataSource1" />
					<property name="targetDetectorDataSource" ref="dataSource1" />
				</bean>
				<bean
					class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
					<property name="identity" value="partition2" />
					<property name="targetDataSource" ref="dataSource2" />
					<property name="targetDetectorDataSource" ref="dataSource2" />
				</bean>
			</set>
		</property>
		<property name="haDataSourceCreator">
			<bean
				class="com.alibaba.cobar.client.datasources.ha.FailoverHotSwapDataSourceCreator">
				<property name="detectingSql"
					value="update cobarha set timeflag=CURRENT_TIMESTAMP()" />
			</bean>
		</property>
	</bean>

	

	<bean id="hashFunction" class="cobar.client.demo.router.HashFunction"></bean>
	<bean id="modFunction" class="cobar.client.demo.router.ModFunction">
		<constructor-arg index="0" value="3"></constructor-arg>
	</bean>
	
	<bean id="internalRouter"
		class="com.alibaba.cobar.client.router.config.CobarInteralRouterXmlFactoryBean">
		<!-- functionsMap是在使用自定义路由规则函数的时候使用 -->
		<!-- <property name="enableCache"></property> -->
		<property name="functionsMap">
			<map>
				<entry key="hash" value-ref="hashFunction"></entry>
				<entry key="mod" value-ref="modFunction"></entry>
			</map>
		</property>
		<property name="configLocations">
			<list>
				<value>classpath:/dbRule/sharding-rules-on-namespace.xml</value>
				<value>classpath:/dbRule/sharding-rules-on-sqlmap.xml</value>
			</list>
		</property>
	</bean>
	<!-- 配置路由规则结束 -->

	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="com.alibaba.cobar.client.transaction.MultipleDataSourcesTransactionManager">
		<property name="cobarDataSourceService" ref="dataSources" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- iBatis SQL map定义。 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<!-- 这里配置的dataSource0为默认的数据源,如果找不到数据库的话则到该数据源中查找 -->
		<property name="dataSource" ref="dataSource0" />
		<property name="configLocation">
			<value>classpath:/sqlmap-config.xml</value>
		</property>
	</bean>
	

	<!-- 工程里一定要使用此工程模板，不能再使用ibatis原生的api，不然有的情况会不经过cobar的过滤 -->
	<bean id="sqlMapClientTemplate" class="com.alibaba.cobar.client.CobarSqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="cobarDataSourceService" ref="dataSources" />
		<property name="router" ref="internalRouter" />
		<property name="sqlAuditor">
			<bean class="com.alibaba.cobar.client.audit.SimpleSqlAuditor" />
		</property>
		<property name="profileLongTimeRunningSql" value="true" />
		<property name="longTimeRunningSqlIntervalThreshold" value="3600000" />
	</bean>


</beans>